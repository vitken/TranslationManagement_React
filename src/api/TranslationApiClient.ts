//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class Client {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getJobs(): Promise<TranslationJobModel[]> {
        let url_ = this.baseUrl + "/api/jobs/GetJobs";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetJobs(_response);
        });
    }

    protected processGetJobs(response: Response): Promise<TranslationJobModel[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(TranslationJobModel.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<TranslationJobModel[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    createJob(body: TranslationJobModel | undefined): Promise<TranslationJobModel> {
        let url_ = this.baseUrl + "/api/jobs/CreateJob";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateJob(_response);
        });
    }

    protected processCreateJob(response: Response): Promise<TranslationJobModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TranslationJobModel.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<TranslationJobModel>(null as any);
    }

    /**
     * @param customer (optional) 
     * @param file (optional) 
     * @return Success
     */
    createJobWithFile(customer: string | null | undefined, file: FileParameter | null | undefined): Promise<TranslationJobModel> {
        let url_ = this.baseUrl + "/api/jobs/CreateJobWithFile?";
        if (customer !== undefined && customer !== null)
            url_ += "customer=" + encodeURIComponent("" + customer) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (file !== null && file !== undefined)
            content_.append("file", file.data, file.fileName ? file.fileName : "file");

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateJobWithFile(_response);
        });
    }

    protected processCreateJobWithFile(response: Response): Promise<TranslationJobModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TranslationJobModel.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<TranslationJobModel>(null as any);
    }

    /**
     * @param jobId (optional) 
     * @param translatorId (optional) 
     * @param newStatus (optional) 
     * @return Success
     */
    updateJobStatus(jobId: number | undefined, translatorId: number | undefined, newStatus: JobStatus | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/jobs/UpdateJobStatus?";
        if (jobId === null)
            throw new Error("The parameter 'jobId' cannot be null.");
        else if (jobId !== undefined)
            url_ += "jobId=" + encodeURIComponent("" + jobId) + "&";
        if (translatorId === null)
            throw new Error("The parameter 'translatorId' cannot be null.");
        else if (translatorId !== undefined)
            url_ += "translatorId=" + encodeURIComponent("" + translatorId) + "&";
        if (newStatus === null)
            throw new Error("The parameter 'newStatus' cannot be null.");
        else if (newStatus !== undefined)
            url_ += "newStatus=" + encodeURIComponent("" + newStatus) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateJobStatus(_response);
        });
    }

    protected processUpdateJobStatus(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    getTranslators(): Promise<TranslatorModel[]> {
        let url_ = this.baseUrl + "/api/TranslatorsManagement/GetTranslators";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetTranslators(_response);
        });
    }

    protected processGetTranslators(response: Response): Promise<TranslatorModel[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(TranslatorModel.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<TranslatorModel[]>(null as any);
    }

    /**
     * @param name (optional) 
     * @return Success
     */
    getTranslatorsByName(name: string | null | undefined): Promise<TranslatorModel[]> {
        let url_ = this.baseUrl + "/api/TranslatorsManagement/GetTranslatorsByName?";
        if (name !== undefined && name !== null)
            url_ += "name=" + encodeURIComponent("" + name) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetTranslatorsByName(_response);
        });
    }

    protected processGetTranslatorsByName(response: Response): Promise<TranslatorModel[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(TranslatorModel.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<TranslatorModel[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    addTranslator(body: TranslatorModel | undefined): Promise<TranslatorModel> {
        let url_ = this.baseUrl + "/api/TranslatorsManagement/AddTranslator";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain",
                "Access-Control-Allow-Origin": "*",
                "Access-Control-Allow-Methods": "DELETE, POST, GET, OPTIONS",
                "Access-Control-Allow-Headers": "Content-Type, Authorization, X-Requested-With"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAddTranslator(_response);
        });
    }

    protected processAddTranslator(response: Response): Promise<TranslatorModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TranslatorModel.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<TranslatorModel>(null as any);
    }

    /**
     * @param translatorId (optional) 
     * @param newStatus (optional) 
     * @return Success
     */
    updateTranslatorStatus(translatorId: number | undefined, newStatus: TranslatorStatus | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/TranslatorsManagement/UpdateTranslatorStatus?";
        if (translatorId === null)
            throw new Error("The parameter 'translatorId' cannot be null.");
        else if (translatorId !== undefined)
            url_ += "translatorId=" + encodeURIComponent("" + translatorId) + "&";
        if (newStatus === null)
            throw new Error("The parameter 'newStatus' cannot be null.");
        else if (newStatus !== undefined)
            url_ += "newStatus=" + encodeURIComponent("" + newStatus) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateTranslatorStatus(_response);
        });
    }

    protected processUpdateTranslatorStatus(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }
}

export enum JobStatus {
    _0 = 0,
    _1 = 1,
    _2 = 2,
}

export class TranslationJobModel implements ITranslationJobModel {
    id?: number;
    customerName?: string | undefined;
    status?: JobStatus;
    originalContent?: string | undefined;
    translatedContent?: string | undefined;
    price?: number;

    constructor(data?: ITranslationJobModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.customerName = _data["customerName"];
            this.status = _data["status"];
            this.originalContent = _data["originalContent"];
            this.translatedContent = _data["translatedContent"];
            this.price = _data["price"];
        }
    }

    static fromJS(data: any): TranslationJobModel {
        data = typeof data === 'object' ? data : {};
        let result = new TranslationJobModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["customerName"] = this.customerName;
        data["status"] = this.status;
        data["originalContent"] = this.originalContent;
        data["translatedContent"] = this.translatedContent;
        data["price"] = this.price;
        return data;
    }
}

export interface ITranslationJobModel {
    id?: number;
    customerName?: string | undefined;
    status?: JobStatus;
    originalContent?: string | undefined;
    translatedContent?: string | undefined;
    price?: number;
}

export enum TranslatorStatus {
    _0 = 0,
    _1 = 1,
    _2 = 2,
}

export class TranslatorModel implements ITranslatorModel {
    id?: number;
    name?: string | undefined;
    hourlyRate?: number;
    status?: TranslatorStatus;
    creditCardNumber?: string | undefined;

    constructor(data?: ITranslatorModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.hourlyRate = _data["hourlyRate"];
            this.status = _data["status"];
            this.creditCardNumber = _data["creditCardNumber"];
        }
    }

    static fromJS(data: any): TranslatorModel {
        data = typeof data === 'object' ? data : {};
        let result = new TranslatorModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["hourlyRate"] = this.hourlyRate;
        data["status"] = this.status;
        data["creditCardNumber"] = this.creditCardNumber;
        return data;
    }
}

export interface ITranslatorModel {
    id?: number;
    name?: string | undefined;
    hourlyRate?: number;
    status?: TranslatorStatus;
    creditCardNumber?: string | undefined;
}

export interface FileParameter {
    data: any;
    fileName: string;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}